-----Aula 1-----
• O que é um endereço?
Número que identifica a localização de cada registo de memória.

• O que é o espaço de endereçamento de um processador?
Gama de endereços. Total de endereços que o CPU consegue referenciar.

• Como se organiza internamente um processador? Quais são os blocos fundamentais da secção de dados? Para que serve a unidade de controlo?
CPU: datapath (secção de dados) e Unidade de controlo
datapath: Multiplexers, ALU(Arithmetic Logic Unit: Add, Sub, And, Or) e Registos Internos.
Control Unit: Geração de sinais de controlo para o datapath para a coordenação dos elementos do datapath e fornecer os recursos necessários ao datapath para as instruções a serem realizadas.

• O que é o conceito "stored-program"?
Poder residir em memória informação de diferentes tipos, que resulta das instruções serem representadas da mesma forma que números e os programas são armazenados em memória, para serem lidos e escritos, tal como os números, também.

• Como se codifica uma instrução? Que informação fundamental deverá ter o código de uma instrução?
Uma instrução codifica se na forma de um número binário.
Deve estar contida a informação de que operação realizar, a localização dos operandos (se existir), onde colocar o resultado e a próxima instrução a realizar.

• O que é o ISA?
Instruction Set Archirecture corresponde a uma descrição para o programador (de assembly) do modo de programação de um dado processador, descrevendo a funcionalidade de cada instrução fornecida ao software.

• Quais são as classes de instruções que agrupam as instruções de uma arquitetura?
Processamento: Operações aritmétricas e lógicas
Tranferência de informação: Cópias entre registos e memória
Controlo de fluxo e execução: Alterações a sequência de execução


-----Aula 2-----

• O que caracteriza as arquiteturas "register-memory" e "load-tore"? De que tipo é a arquitetura MIPS?
Na arquitetura "register-memory" os operandos das instruções residem em registos internos do CPU ou em memória.
Na arquitetura "load-store" os operandos apenas residem em registos internos do CPU.
A arquitetura MIPS é "load-store.

• Com quantos bits são codificadas as instruções no MIPS? Quantos registos internos tem o MIPS? O que diferencia o registo $0 dos restantes? Qual o número do registo interno do MIPS a que corresponde o registo $ra?
Intruções no MIPS têm 32 bits (dimensão fixa).
O MIPS tem 32 registos internos (de 32 bits).
O registos $0 tem sempre o valor 0 e apenas pode ser lido.
O nome virtual $ra corresponde ao registo $31.

• Quais os campos em que se divide o formato de codificação R? Qual o significado 
de cada um desses campos? Qual o valor do campo opCode nesse formato?
Campos da instrução (formato de codificação R):
opcode (op - 6 bits), Endereço do registo do 1o/20 operando (rs/rt - 5 bits), endereço do registo onde estará o resultado (rd - 5 bits), shift amount (shamt - 5 bits) e código da operação (funct - 6 bits).
opcode é 0 nas instruções do tipo R.

• O que faz a instrução cujo código máquina é: 0x00000000?
Shift logico à esquerda de 0 bits do registo $0.
Ou seja, não acontece nada.

• O símbolo >> da linguagem C significa deslocamento à direita e é traduzido por SRL ou SRA (no caso do MIPS). Quando é que usado SRL e quando é que é usado SRA?
SRL é usado quando é pretendido fazer shift lógico e SRA quando é aritmético (ambos shifts à direita).

• Qual a instrução nativa do MIPS em que é traduzida a instrução virtual "move $4, $15"?
or $4, $15, $0

• Determine o código máquina das seguintes instruções:
xor $5,$13,$24 - sub $30,$14,8 - sll $3,$9,7 - sra $18,$9,8
000000 00101 01101 11000 00000 100110 
000000 11110 01110 01000 00000 100010
000000 00000 01001 00011 00111 000000
000000 00000 01001 10010 01000 000011

• Traduza para instruções assembly do MIPS a seguinte expressão aritmética, supondo x e y inteiros e residentes em $t2 e $t5, respetivamente (apenas pode usar instruções nativas e não deverá usar a instrução de multiplicação): y = -3 * x + 5;
sub $t0, $0, $t2    #$t0 = -x
sub $t0, $t0, $t2   #$t0 = -2x
sub $t0, $t0, $t2   #$t0 = -3x

addi $t5, $t0, 5 


• Traduza para instruções assembly do MIPS o seguinte trecho de código:
int a, b, c; //a:$t0, b:$t1, c:$t2
unsigned int x, y, z; //x:$a0, y:$a1, z:$a2
z = x >> 2 + y;
c = a >> 5 – 2 * b;
addi $t3, $a1, 2
srl $a2, $a0, $t3
sll $t4, $t1, 1
li $t5, 5
sub $t4, $t5, $t4
srlv $t2, $t0, $t4

-----Aula 3/4-----

• Qual a função da instrução "slt"?
slt Rdst, Rsrc1, Rsrc2
Se o conteúdo do Rsrc1 for menor que Rsrc2, o Rdst toma o valor de 1, caso contrário fica a 0.

• Qual o valor armazenado no registo $1 na execução da instrução "slt $1, $3, $7", admitindo que: 
    a) $3=5 e $7=23 
    $1 = 1;
    b) $3=0xFE e $7=0x913D45FC
    $1 = 0; ($7 tem valor negativo)

• Com que registo comparam as instruções "bltz", "blez", "bgtz" e "bgez"?
$0

• Decomponha em instruções nativas do MIPS as seguintes instruções virtuais:
	 blt $15,$3,exit
		slt $AT, $15, $3
		bne $AT, $0, exit
	 ble $6, $9,exit
		slt $AT, $9, $6
		beq $AT, $0, exit
	 bgt $5, 0xA3,exit
		addi $AT, $0, 0xA3
		slt $AT, $AT, $5
		bne $AT, $0, exit
	 bge $10,0x57,exit
		slti $AT, $10, 0x57
		beq $AT, $0, exit
	 blt $19,0x39,exit
		slti $AT, $19, 0x39
		bne $AT, $0, exit
	 ble $23,0x16,exit
		addi $AT, $0,0x16
		slt $AT, $AT, $23
		beq $AT, $0, exit

• Traduza para assembly do MIPS os seguintes trechos de código de linguagem C (admita que a, b e c residem nos registos $4, $7 e $13, respetivamente):
1) if(a > b && b != 0)
		c = b << 2;
	else
		c = (a & b) ^ (a | b);
		
	bne $7, $0, else
	slt $2, $7, $4	#b < a -> $2 = 1
	beq $2, $0, else
	
	sll $13, $7, 2
	
	j endif
	
else:
	and $3, $4, $7 
	or  $5, $4, $7
	xor $13, $3, $5
	
endif:
	
	jr $ra
	
2) if(a > 3 || b <= c)
		c = c – (a + b);
	else
		c = c + (a – 5);
		
	bgt $4, 3, if	#addi $AT, $0, 3
					#slti $AT, $AT, $4
					#bne  $AT, $0, if
	ble $7, $13, if	#slt $AT, $13, $7
					#beq $AT, $0, if
	
	ori $3, $0, 5
	
	sub $3, $4, $3
	add $13, $13, $3
	
	j endif
	
if:	
	add $2, $4, $7
	sub $13, $13, $2
	
endif:
	jr $ra
	
	
• Na tradução para assembly, que diferenças encontra entre um ciclo do tipo "while(…){…}" e um do tipo "do{…}while(…);"
O teste condicional é realizado no final do ciclo, logo o corpo do ciclo é executado pelo menos uma vez.

• Traduza para assembly do MIPS os seguintes trechos de código de linguagem C (atribua registos internos para o armazenamento das variáveis i e k ) :
1) 	int i, k;
	for(i=5, k=0; i < 20; i++, k+=5);
	
		li $2, 5
		li $3, 0

while:	
		bge $2, 20, endw
		
		addi $2, $2, 1
		addi $3, $3, 5
		
		j while

endw:
		jr $ra
	
2) 	int i=100, k=0;
	for( ; i >= 0; ){
	i--;
	k -= 2;
	}
	
		ori $2, $0, 100
		ori $3, $0, 0
	
for: 	
		slt $4, $2, $0
		beq $4, $0, endf
		
		addi $2, $2, -1 
		addi $3, $3, -2
		
		j for

endf:	
		jr $ra
	
3) 	unsigned int k=0;
	for( ; ; ){
	k += 10;
	}
	
	li $2, 0
	
while:	
		addi $2, $2, 10
		
		j while
		
		jr $ra

4) 	int k=0, i=100;
	do{
	k += 5;
	} while(--i >= 0);
	
do:
	ori $2, $0, 0
	ori $3, $0, 100
	
	addi $2, $2, 5
	addi $3, $3, -1
	
	bge $3, $0, do
	
	jr $ra
	
-----Aula 5/6-----
	
• Qual o modo de endereçamento usado pelo MIPS para acesso a quantidades residentes na memória externa?
Endereçamento tipo registo - endereços dos registos internos são especificados na própria instrução
Endereçamento indireto por registo - a instrução indica um registo que contém o endereço de memória a aceder
Endereçamento indireto por registo - a instrução indica um registo que contém o endereço de memória a aceder

• Na instrução "lw $3,0x24($5)" qual a função dos registos $3 e $5 e da constante 0x24?
$3   - registo interno de destino
$5   - registo de endereçamento indireto (registo com endereço a aceder na memória externa)
0x24 - offset

• Qual o formato de codificação das instruções de acesso à memória no MIPS e qual o significado de cada um dos seus campos?
Formato I
op (6 bits) : operand code - código da operação a realizar
rs (5 bits) : source register - registo do endereçamento indireto
rt (5 bits) : register target - registo interno do cpu onde realizar a operação
offset(16 bits) : deslocamento para calculo do rs 

• Qual a diferença entre as instrução "sw" e "sb"? O que distingue as instruções "lb" e "lbu"?
"sw" (Store word) transfere uma palavra de 32 bits de um registo interno para memória e na instrução "sb" (Store byte) são apenas 8 bits
"lb" intrepeta o byte como unsigned (colocando os restantes 24 bits a '0') e "lbu" extende o sinal dos 8 bits para os 32.

• O que acontece quando uma instrução lw/sw acede a um endereço que não é múltiplo de 4?
O endereço é inválido e é gerada uma exceção, terminando a execução do programa.

• Sabendo que o opcode da instrução "lw" é 0x23, determine o código máquina, expresso em hexadecimal, da instrução "lw $3,0x24($5)".
100011 00101 00011 0000000000100100
1000 1100 1010 0011 0000 0000 0010 0100
0x8CA40024

• Suponha que a memória externa foi inicializada, a partir do endereço 0x10010000, com os valores 0x01,0x02,0x03,0x04,0x05,…
Suponha ainda que $3=0x1001 e $5=0x10010000. 
Qual o valor armazenado no registo destino após a execução da instrução "lw $3,0x24($5)"?
0x24 ($3)

• Nas condições anteriores qual o valor armazenado no registo destino pelas instruções: "lbu $3,0xA3($5)" e "lb $4,0xA3($5)"?
$3 : 0x000000A3
$4 : 0x111111A3

• Quantos bytes são reservados em memória por cada uma das diretivas:
L1: .asciiz"Aulas5&6T"
10
L2: .word 5,8,23
12
L3: .byte 5,8,23
3
L4: .space 8
8

• Acrescente a diretiva ".align 2" a seguir a L3. 
Desenhe esquematicamente a memória e preencha-a com o resultado das diretivas anteriores.
Endereço de memória reservado de 4 em 4.

• Supondo que "L1" corresponde ao endereço inicial do segmento de dados, e que esse endereço é 0x10010000, 
determine os endereços a que correspondem os labels "L2", "L3" e "L4", nas condições da questão anterior.
L1: 0x10010000 -> 0x10010009
L2: 0x1001000C -> 0x10010017
L3: 0x10010018 -> 0x1001001A
L4: 0x1001001B -> 0x10010022

-----Aula 7-----
• O que significa a declaração "int *ac;"? Qual a diferença entre essa declaração e "int ac"?
O que significa a declaração "char *ac;"?
int *ac é um ponteiro para um inteiro - ac armaneza um endereço de memória
int ac é a declaração de uma variável inteira "normal"
char *ac é um ponteiro para um valor do tipo char (usado mt para strings)

• A partir das declarações de "a" e "b":
	int a;
	int *b;
identifique quais das seguintes atribuições são válidas:
	a=b : I 		b=*a : I		b=&(a+1) : I 	a=&b : I		b=&a : V
	b=*a+1 : I		b=*(a+1) : I	a=*b : V 		a=*(b+1) : V 	a=*b+1 : V
	
• Identifique as operações, e respetiva sequência, realizadas nas seguintes instruções C:
	a=*b++; 	
	é atribuido a 'a' o valor para qual 'b' está apontado e depois o ponteiro é incrementado 
	
	a=*(b)++; 		
	é atribuido a 'a' o valor para qual 'b' está apontado e depois o ponteiro é incrementado 
	
	a=*(++b);
	o valor do ponteiro de 'b' é incrementado e depois o valor desse novo endereço é atribuido a 'a'
	
• Suponha que "p" está declarado como "int *p;".  Supondo que a organização da memória é do tipo "byte-addressable",  
qual o incremento no endereço que é obtido pela operação "p=p+2;"?

4*2(bytes) = 8 bytes


• Suponha que "b" é um array declarado como "int b[25];".
Como é obtido o endereço inicial do array, i.e., o endereço da sua primeira posição? 
Supondo uma memória "byteaddressable", como é obtido o endereço do elemento "b[6]"?

Sendo p o endereço inicial do array: int* p = b; ou int* p = &b[0];
E o endereço de b[6]: int* p = b+6; ou int* p = &b[6]; (incrementando o endereço de memória em 4*6 bytes)


• Dada a seguinte sequência de declarações:
	int b[25];
	int a;
	int *p = b;
	Identifique qual ou quais das seguintes atribuições
	permitem aceder ao elemento de índice 5 do array "b":
	a = b[5]; a = *p + 5; a = *(p + 5); a = *(p + 20);
	
	a = b[5]; a = *(p + 5);
	
• Pretende-se escrever uma função para a troca do conteúdo de duas variáveis (troca(a, b);). Isto é, se, antes da
chamada à função, a=2 e b=5, então, após a chamada à função, os valores de a e b devem ser: a=5 e b= 2
	Uma solução incorreta para o problema é a seguinte:
		void troca(int x, int y)
		{
			int aux;
			aux = x;
			x = y;
			y = aux;
		}
		
• Identifique o erro presente no trecho de código e faça as
necessárias correções para que a função tenha o
comportamento pretendido

É passada a função uma cópia das variaveis, logo as variaveis não são alteradas,
Deverá ser uma passagem de argumentos por referência à função:
		void troca(int* x, int* y)
		{
			int aux;
			aux = *x;
			*x = *y;
			*y = aux;
		}
		

-----Aula8-----
• Qual o formato de codificação de cada uma das seguintes instruções: "beq/bne", "j", "jr"?
"beq/bne" : formato I
"j"  : formato J
"jr" : formato R

• O que é codificado no campo offset do código máquina das instruções "beq/bne" ?
O campo de offset codifica a diferença entre o valor endereço alvo e o valor do endereço seguinte à instrução de branch.

• A partir do código máquina de uma instrução "beq/bne", como é formado o endereço-alvo (Branch Target Address)?
Target Adress = PC + (offset/4)
PC - program counter 

• A partir do código máquina de uma instrução "j", como é formado o endereço-alvo (Jump Target Address)?
26LSbits do código máquina deslocados 2 bits à direita (x4).

• Na instrução "jr $ra", como é obtido o endereço-alvo?
A instrução "jr" obtem o endereço alvo apartir do conteúdo em $ra.

• Qual o endereço mínimo e máximo para onde uma instrução "j", residente no endereço de memória 0x5A18F34C, pode saltar?
(?)

• Qual o endereço mínimo e máximo para onde uma instrução "beq", residente no endereço de memória 0x5A18F34C, pode saltar?
(?)

• Qual o endereço mínimo e máximo para onde uma instrução "jr", residente no endereço de memória 0x5A18F34C pode saltar?
(?)

• Qual a gama de representação da constante nas instruções aritméticas imediatas?
16 bits com sinal [-32768, +32767]

• Qual a gama de representação da constante nas instruções lógicas imediatas?
16 bits sem sinal [0, 65535]

• Porque razão não existe no ISA do MIPS uma instrução que permita manipular diretamente uma constante de 32 bits?
Porque as instruções são sempre de 32 bits, e uma instrução de incluir outros campos para além da constante.

• Como é que no MIPS se podem manipular constantes de 32 bits?
A instrução lui permite dar load aos 16 bits mais significativos de uma constante num registo.
E com um ori os bits menos significativos entram no conteúdo do registo.

• Apresente a decomposição em instruções nativas das seguintes instruções virtuais:
	li $6,0x8B47BE0F :
	lui $6, 0x8B47
	ori $6, $6, 0xBE07
	
	xori $3,$4,0x12345678
	lui $5, 0x1234
	ori $5, $5, 0x5678
	xor $3, $4, $5
	
	addi $5,$2,0xF345AB17
	lui $3, 0xF345
	ori $3, $3, 0xAB17
	add $5, $2, $3
	
	beq $7,100,L1
	ori $8, $0, 100
	beq $7, $8, L1
	
	blt $3,0x123456,L2
	lui $4, 0x12
	xori $4, $4, 0x3456
	blt $3, $4, L2
	
-----Aula9/10-----
• O que é uma sub-rotina? Qual a instrução do MIPS usada para saltar para uma sub-rotina? 
Porque razão não pode ser usada a instrução "j"?
Uma sub-rotina é um trecho de código que pode ser chamado em diferentes partes do programa para realizar uma tarefa específica.
Ou seja, uma função (no contexto de C).
"jal"(jump and link): instrução para saltar para uma sub-rotina.
A instrução "jal", no MIPS, armaneza no registo $ra (return address) guarda o atual valor do PC.

• Quais as operações realizadas, e relativa sequência, na execução de uma instrução "jal"? 
Qual o nome virtual e o número do registo associado à execução dessa instrução?
O endereço da próxima instrução (PC + 4) é guardado no registo $ra e o PC é a atualizado com especificado na instrução (target address)
$ra: $31

• No caso de uma sub-rotina ser simultaneamente chamada e chamadora (sub-rotina intermédia) que operações é obrigatório realizar nessa subrotina?
No inicio, guardar o registo $ra no stack.
E no fim, restaurar o valor de $ra.

• Qual a instrução usada para retornar de uma sub-rotina? Que operação fundamental é realizada na execução dessa instrução?
"jr": jump Register
Atualiza o PC com o valor no registo $ra.

• De acordo com a convenção de utilização de registos no MIPS:
	• Que registos são usados para passar parâmetros e para devolver resultados de uma sub-rotina?
	$a0 a $a3 ($4 a $7)
	$v0 e $v1 ($2 e $3)
	
	• Quais os registos que uma sub-rotina pode livremente usar e alterar sem necessidade de prévia salvaguarda?
	$t0 a $t9 ($8 a $15 e $24 a $25)
	
	• Quais os registos que uma sub-rotina tem de preservar? Quais os
	registos que uma sub-rotina chamadora tem a garantia que a subrotina chamada não altera?
	$s0 a $s7 ($16 a $23)
	
	• Em que situação devem ser usados registos $sn? Em que situação
	devem ser usados os restantes: $tn, $an e $vn?
	Perguntas acima
	
• O que é a stack? Qual a utilidade do stack pointer?
A stack (pilha) é uma estrutura de dados em memória usada para armazenar informações temporárias, como endereços de retorno, variáveis locais e valores de registos.
Funciona como uma estrutura LIFO (Last In, First Out).
O stack pointer (registo $sp) mantém o endereço do topo da pilha, ajudando na adição (push) e remoção (pop) de dados.

• Como funcionam as operações de push e pop?
Em uma stack, push adiciona um elemento no topo, e pop remove o elemento do topo, seguindo o princípio LIFO (Last In, First Out).

• Porque razão a stack cresce tipicamente no sentido dos endereços
mais baixos?
A convenção de crescimento para endereços mais baixos evita colisões com o segmento de heap, 
que normalmente cresce em direção a endereços mais altos. Isso permite que a memória seja usada de forma eficiente.

• Quais as regras para a implementação em software de uma stack no
MIPS? Qual o registo usado como stack pointer?
stack pointer a apontar para o topo da pilha, ajustar o valor do ponteiro nas operações na stack
$sp: $29

• De acordo com a convenção de utilização de registos do MIPS:

	• Que registos devem preferencialmente ser usados numa sub-rotina
	intermédia, para armazenar variáveis cujo tempo de vida inclui a chamada
	de sub-rotinas? Que cuidados se deve ter na utilização desses registos?

	• Que registos devem preferencialmente ser usados numa sub-rotina
	intermédia, para armazenar variáveis cujo tempo de vida não inclui a
	chamada de sub-rotinas?

	• Que registos devem preferencialmente ser usados numa sub-rotina
	terminal para armazenar variáveis?

---To Do---

• Para a função com o protótipo seguinte, indique, para cada um dos
parâmetros de entrada e para o valor devolvido, qual o registo do
MIPS usado para a passagem dos respetivos valores:
char fun(int a,unsigned char b,char *c,int *d)
Parametros de entrada:
int a: $a0 ($4).
unsigned char b: $a1 ($5).
char *c: $a2 ($6).
int *d: $a3 ($7).

Valor devolvido:
char: $v0 ($2).

• Traduza para assembly do MIPS a seguinte função fun1(),
aplicando a convenção de passagem de parâmetros e
salvaguarda de registos:
char *fun2(char *, char);
char *fun1(int n, char *a1, char *a2)
{
	int j = 0;
	char *p = a1;
	do
	{
		if((j % 2) == 0)
			fun2(a1++, *a2++);
	} while(++j < n);
	*a1='\0';
	return p;
}

-----Aula11-----
• Para uma codificação em complemento para 2, apresente a gama de representação que é possível obter com 3, 4, 5, 8 e 16 bits 
(indique os valores-limite da representação em binário, hexadecimal e em decimal com sinal e módulo).
3:[-4, 3] ; 4:[-8, 7] ; 5:[-16, 15] ; 8:[-128, 127] ; 16:[-32768, 32767]

• Determine a representação em complemento para 2 com 16 bits das seguintes quantidades:
5      : 0000 0000 0000 0101
-3     : 1111 1111 1111 1101
-128   : 1111 1111 1000 0000
-32768 : 1000 0000 0000 0000
31     : 0000 0000 0001 1111
-8     : 1111 1111 1111 1000
256    : 0000 0001 0000 0000
-32	   : 1111 1111 1110 0000

• Determine o valor em decimal representado por cada uma das quantidades seguintes, supondo que estão codificadas em complemento para 2 com 8 bits:
00101011 : 43
0xA5     : -87
10101101 : -83
0x6B	 : 107
0xFA	 : -6
0x80	 : -128

• Determine a representação das quantidades do exercício anterior em hexadecimal com 16 bits (também codificadas em complemento para 2).
00101011 : 0x002B
0xA5     : 0xFFA5
10101101 : 0xFFAD
0x6B	 : 0x006B
0xFA	 : 0xFFFA
0x80	 : 0xFF80

• Como é realizada a deteção de overflow em operações de adição com quantidades sem sinal? 
Sendo A e B os operandos e n o número de bits da representação
Quando A+B > 2^n -1 ou quando A-B com A<B 
Ou quando o bit de carry Cn = 1

• E com quantidades com sinal (codificadas em complemento para 2)?
Quando A+B > 2^(n-1) -1 ou A+B < 2^(n-1)
Ou (Para R=A+B e bit de carry Cn):
OVF = ¬Rn-1 . An-1 . Bn-1 + Rn-1 . ¬An-1 . ¬Bn-1 (Sinal do resultado diferente do sinal dos operandos)
OVF = Cn-1 . ¬Cn + ¬Cn-1 . Cn (Carry in do MsB diferente do Carry Out)

• Para a multiplicação de dois operandos de "m" e "n" bits, respetivamente, qual o número de bits necessário para o armazenamento do resultado?
m + n

• Apresente a decomposição em instruções nativas da instrução virtual mul $5,$6,$7
mult $6, $7
mflo $5

• Determine o resultado da instrução anterior, quando $6=0xFFFFFFFE e $7=0x00000005.
-2*5 = 10
0x0000000A

• Apresente a decomposição em instruções nativas das instruções virtuais 
div $5,$6,$7
div $6, $7
mflo $5

rem $5,$6,$7
div $6, $7
mfhi $5

• Determine o resultado das instruções anteriores, quando $6=0xFFFFFFF0 e $7=0x00000003
-16/3
div = -5 = 0xFFFFFFFB
rem = -1 = 0xFFFFFFFF

---To Do---

• As duas sub-rotinas do slide seguinte permitem detetar
overflow nas operações de adição com e sem sinal, no
MIPS. Analise o código apresentado e determine o resultado
produzido, pelas duas sub-rotinas, nas seguintes situações:

# Overflow detection, signed
# int isovf_signed(int a, int b);
isovf_signed: ori $v0,$0,0
			  xor $1,$a0,$a1
			  slt $1,$1,$0
			  bne $1,$0,notovf_s
			  addu $1,$a0,$a1
			  xor $1,$1,$a0
			  slt $1,$1,$0
			  beq $1,$0,notovf_s
			  ori $v0,$0,1
notovf_s: 	  jr $ra

# Overflow detection, unsigned
# int isovf_unsigned(unsigned int a, unsigned int b);
isovf_unsigned: ori $v0,$0,0
				nor $1,$a1,$0
				sltu $1,$1,$a0
				beq $1,$0,notovf_u
				ori $v0,$0,1
notovf_u: 		jr $ra

$a0=0x7FFFFFF1, $a1=0x0000000E;


$a0=0x7FFFFFF1, $a1=0x0000000F;

$a0=0xFFFFFFF1, $a1=0xFFFFFFFF;

$a0=0x80000000, $a1=0x80000000; 

-----Aula14->16-----
• Quais as diferenças entre uma arquitetura Harvard e uma arquitetura von Neumann?
Divisão entre memória de Instruções e de Dados. Permite leitura/escrita simultaneamente em ambos as memórias.

• Suponha um sistema baseado numa arquitetura von Neumann, com um barramento de endereços de 20 bits e com uma organização de memória do tipo byte-addressable. 
Qual a dimensão máxima, em bytes, que os programas a executar neste sistema (instruções+dados+stack) podem ter?
2^20

• Num processador baseado numa arquitetura Harvard, a memória de instruções está organizada em words de 32 bits, 
a memória de dados em words de 8 bits (byte-addressable) e os barramentos de endereços respetivos têm uma dimensão de 24 bits. 
Qual a dimensão, em bytes, dos espaços de endereçamento de instruções e de dados?
Dados: 2^24 / 2
Instruções: 2^24

• O que significa um elemento de estado ter escrita síncrona?
O seu conteúdo/estado, apenas é atualizado na transição ativa do sinal de relógio.

• Considere um elemento de estado, com leitura assíncrona, que apenas tem o sinal de clock, na sua interface de controlo. 
O que pode concluir-se relativamente à escrita?
Não existe escrita, espaço de memória apenas para leitura.

• Suponha um elemento de estado, com escrita síncrona e leitura assíncrona, que apresenta, na sua interface de controlo, um sinal
"read", um sinal "write" e um sinal de clock. Indique que sinal ou sinais têm que estar ativos para que se realize: 
a) uma operação de leitura: read 
b) uma operação de escrita: write e transição ativa do sinal de relógio

• Qual a capacidade de armazenamento, expressa em bytes, de uma memória com uma organização interna em words de 32 bits e um barramento de endereços de 30 bits?
2^30 * 4 (bytes)

• Quais as operações realizadas no datapath que são comuns a todas as instruções?
Leitura da memória de instruções usando o valor do Program Counter (PC);
Incrementar o PC + 4;
(Instruction Fetch)
Leitura dos registos rs e rt

• Identifique a operação realizada na ALU na realização de cada uma
das seguintes instruções: tipo 
R   : Operação aritmética/lógica, especificada no campo funct
addi: Soma
slti: Comparação (???) 
lw  : Soma
sw  : Soma
beq : Subtração

• Indique qual a operação realizada na conclusão de cada uma das
seguintes instruções: tipo R, addi, slti, lw, sw, beq e j.
R   : Escrita do resultado no registo rd
addi: Escrita do resultado no registo rt
slti: Escrita do resultado no registo rt
lw  : Escrita do valor lido em memória em rt
sw  : Escrita em memória
beq : Atualização do PC com o endereço destino (se branch-taken)
j   : Atualização do PC com o endereço destino

• Suponha que o datapath está a executar a instrução add $3,$4,$5.
Que operações serão realizadas na próxima transição ativa do sinal de relógio?
Escrita do resultado em $3 e atualização do PC com PC+4

• No datapath single-cycle que tipo de informação é armazenada na memória cujo endereço é a saída do registo PC?
A próxima instrução a ser executada.

• Qual o endereço de memória onde deve estar armazenada a primeira instrução do programa 
para que a execução possa ser reiniciada sempre que se ative o sinal de "reset" do registo PC?
Mesmo em que ficar o PC após reset (0x00000000)

• Suponha que cada registo do banco de registos foi inicializado com um valor igual a: (32-número do registo). 
Indique o valor presente nas entradas do banco de registos ReadReg1, ReadReg2 e WriteReg, e o valor presente nas saídas ReadData1 e ReadData2, 
durante a execução das instruções com o código máquina: 0x00CA9820, 0x8D260018 (lw) e 0xAC6A003C (sw).
000000 00110 01010 10011 00000 100000
R - add $19, $5, $10
ReadReg1 : 5
ReadReg2 : 10
WriteReg : 19
ReadData1: 27 
ReadData2: 22

100011 01001 00110 000000000001 1000
lw $6, 24($9)
ReadReg1 : 9
ReadReg2 : 6
WriteReg : 6
ReadData1: 23
ReadData2: 26

101011 00011 01010 0000 0000 0011 1100
sw $12, 60($3)
ReadReg1 : 12
ReadReg2 : 3
WriteReg : X
ReadData1: 20
ReadData2: 29

• Considerando ainda a inicialização do banco de registos da questão anterior, 
indique qual o valor calculado pela ALU durante a execução das instruções LW com o código máquina 
0x8CA40005
100011 00101 00100 0000 0000 0000 0101
lw $4, 5($5) 
27 + 5 = 32

0x8CE6FFF3
100011 00111 00110 1111 1111 1111 0011
lw $6, -13($7)
25 + (-13) = 12

• Qual o valor à saída do somador de cálculo do BTA durante a execução da instrução cujo código máquina é 0x10430023, supondo que o valor à saída do registo PC é 0x00400034?
0x10430023
000100 00010 00011 0000 0000 0010 0011
0x00400034 + 0x00000023 * 2


-----Aula17/18-----
• De que tipo é a unidade de controlo principal do datapath single-cycle?
Combinatória

• Como calcularia o tempo mínimo necessário para executar cada uma das instruções anteriormente analisadas?
Somando os atrasos derivados do caminho critico do circuito.
Instruction Fetch, leitura de operandos, (se necessário), cálculo na ALU, acesso a memória e escrita num registo.

• O que limita a frequência máxima do relógio do datapath single-cycle?
O tempo de execução da instrução mais longa 

• Que alterações é necessário fazer ao datapath single-cycle para permitir a execução das instruções: 
• "bne” – branch not equal 
Sinal de controlo adicional comparado com o saída zero da ALU
• "jal" – jump and link
Multiplexer na entrada Write Data/Register com PC e $ra
• "jr" – jump register
Atualização do PC com o valor do registo, mais uma entrada no multiplexer de atualização do PC
• "nor", "xor" e "sltu“ (todas tipo R)
Mais operações na ALU, Sinal de seleção da operação com mais um bit.

• Analise o datapath e identifique que instruções deixariam de funcionar
corretamente se a unidade de controlo bloqueasse o sinal RegWrite a '1'.
Instruções sem escrita em registo: sw, beq e j

• Repita o exercício anterior para cada uma das seguintes situações:
RegWrite='0': Instruções com escrita em memória: tipo R, addi, slti, lw
MemRead='0': Intruções que acedem à memória para leitura: lw
MemWrite='0': Intruções que acedem à memória para escrita: sw
ALUop="00": Intruções que não realizam uma subtração na ALU: sw, lw, tipo R s/ sub, slti
RegDst='1': Intruções que escrevem num registo s/ ser tipo R: lw, addi, slti
ALUSrc='0': Instruções que usam como 2o operando um imediato: addi, slti, lw, sw
MemtoReg='0': Instroções que escrevem no registo com um valor da memória: lw
MemtoReg='1': Instruções que escrevem no registo com o valor cálculado pelo a ALU: slti, addi, tipo R

• Que consequência teria para o funcionamento do datapth o bloqueio do sinal Branch a '1'?
Com a ALU cálculando um resultado favorável a um branch, o valor cáculado para branch-taken será usado indevidamente, causando fluxo de execução incorreto.

-----Aula19->21-----
• Considere um programa que executa em 10s num computador "A" com uma frequência de 4GHz. 
Pretende-se desenvolver um computador "B" que execute o programa em 6s. 
O hardware designer verificou que é possível um aumento da frequência de trabalho do CPU do computador "B", 
mas isso acarreta um acréscimo do número total de ciclos de relógio de 1,2 vezes relativamente a A. 
Qual a frequência de trabalho que deverá ter o CPU da máquina "B"?


• Considere duas máquinas com implementações distintas da mesma
arquitetura do conjunto de instruções (ISA). Para um dado programa,
• Máquina A: Clock_cycle = 350 ps; CPI = 2,0
• Máquina B: Clock_cycle = 400 ps; CPI = 1,5
Qual a máquina mais rápida? Qual a relação de desempenho?

• Considere duas máquinas ("A" e "B") com implementações distintas da
mesma arquitetura do conjunto de instruções (ISA). Para um mesmo
programa, a máquina "A" apresenta um CPI de 2,0 e a "B" de 3,125.
Usando a métrica tempo de execução, verificou-se que a máquina "A"
é mais rápida que a máquina "B" por um fator de 1,25. Calcule a
relação entre as frequências de relógio das máquinas "A" e "B".

-----Aula22->26-----