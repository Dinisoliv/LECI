// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 22.1std.2 Build 922 07/20/2023 SC Lite Edition"

// DATE "11/28/2023 00:04:30"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for Questa Intel FPGA (Verilog) only
// 

`timescale 1 ps/ 1 ps

module EqCmpDemo (
	pin_name1,
	\11 ,
	I01,
	\12 ,
	I02,
	\13 ,
	I03,
	\14 ,
	I04);
output 	pin_name1;
input 	\11 ;
input 	I01;
input 	\12 ;
input 	I02;
input 	\13 ;
input 	I03;
input 	\14 ;
input 	I04;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \pin_name1~output_o ;
wire \11~input_o ;
wire \12~input_o ;
wire \I02~input_o ;
wire \I01~input_o ;
wire \inst~0_combout ;
wire \13~input_o ;
wire \14~input_o ;
wire \I04~input_o ;
wire \I03~input_o ;
wire \inst~1_combout ;
wire \inst~combout ;


cycloneive_io_obuf \pin_name1~output (
	.i(\inst~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\pin_name1~output_o ),
	.obar());
// synopsys translate_off
defparam \pin_name1~output .bus_hold = "false";
defparam \pin_name1~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \11~input (
	.i(\11 ),
	.ibar(gnd),
	.o(\11~input_o ));
// synopsys translate_off
defparam \11~input .bus_hold = "false";
defparam \11~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \12~input (
	.i(\12 ),
	.ibar(gnd),
	.o(\12~input_o ));
// synopsys translate_off
defparam \12~input .bus_hold = "false";
defparam \12~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \I02~input (
	.i(I02),
	.ibar(gnd),
	.o(\I02~input_o ));
// synopsys translate_off
defparam \I02~input .bus_hold = "false";
defparam \I02~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \I01~input (
	.i(I01),
	.ibar(gnd),
	.o(\I01~input_o ));
// synopsys translate_off
defparam \I01~input .bus_hold = "false";
defparam \I01~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst~0 (
// Equation(s):
// \inst~0_combout  = (\11~input_o  & (\I01~input_o  & (\12~input_o  $ (!\I02~input_o )))) # (!\11~input_o  & (!\I01~input_o  & (\12~input_o  $ (!\I02~input_o ))))

	.dataa(\11~input_o ),
	.datab(\12~input_o ),
	.datac(\I02~input_o ),
	.datad(\I01~input_o ),
	.cin(gnd),
	.combout(\inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst~0 .lut_mask = 16'h8241;
defparam \inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \13~input (
	.i(\13 ),
	.ibar(gnd),
	.o(\13~input_o ));
// synopsys translate_off
defparam \13~input .bus_hold = "false";
defparam \13~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \14~input (
	.i(\14 ),
	.ibar(gnd),
	.o(\14~input_o ));
// synopsys translate_off
defparam \14~input .bus_hold = "false";
defparam \14~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \I04~input (
	.i(I04),
	.ibar(gnd),
	.o(\I04~input_o ));
// synopsys translate_off
defparam \I04~input .bus_hold = "false";
defparam \I04~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \I03~input (
	.i(I03),
	.ibar(gnd),
	.o(\I03~input_o ));
// synopsys translate_off
defparam \I03~input .bus_hold = "false";
defparam \I03~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst~1 (
// Equation(s):
// \inst~1_combout  = (\13~input_o  & (\I03~input_o  & (\14~input_o  $ (!\I04~input_o )))) # (!\13~input_o  & (!\I03~input_o  & (\14~input_o  $ (!\I04~input_o ))))

	.dataa(\13~input_o ),
	.datab(\14~input_o ),
	.datac(\I04~input_o ),
	.datad(\I03~input_o ),
	.cin(gnd),
	.combout(\inst~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst~1 .lut_mask = 16'h8241;
defparam \inst~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb inst(
// Equation(s):
// \inst~combout  = (\inst~0_combout  & \inst~1_combout )

	.dataa(\inst~0_combout ),
	.datab(\inst~1_combout ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst~combout ),
	.cout());
// synopsys translate_off
defparam inst.lut_mask = 16'h8888;
defparam inst.sum_lutc_input = "datac";
// synopsys translate_on

assign pin_name1 = \pin_name1~output_o ;

endmodule
