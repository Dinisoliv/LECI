// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 00:04:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EqCmpDemo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EqCmpDemo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 11;
reg 12;
reg 13;
reg 14;
reg I01;
reg I02;
reg I03;
reg I04;
// wires                                               
wire pin_name1;

// assign statements (if any)                          
EqCmpDemo i1 (
// port map - connection between master ports and signals/registers   
	.\11 (11),
	.\12 (12),
	.\13 (13),
	.\14 (14),
	.I01(I01),
	.I02(I02),
	.I03(I03),
	.I04(I04),
	.pin_name1(pin_name1)
);
initial 
begin 
#1000000 $finish;
end 

// 11
initial
begin
	11 = 1'b0;
end 

// 12
initial
begin
	12 = 1'b0;
end 

// 13
initial
begin
	13 = 1'b0;
end 

// 14
initial
begin
	14 = 1'b0;
end 

// I01
initial
begin
	I01 = 1'b0;
end 

// I02
initial
begin
	I02 = 1'b0;
end 

// I03
initial
begin
	I03 = 1'b0;
end 

// I04
initial
begin
	I04 = 1'b0;
end 
endmodule

